'use strict';

var path = require('path');
var connect = require('connect');
var Module = require('./module');
var response = require('./response');
var services = require('./services');
var utils = require('./utils');

/**
 * Объект приложения.
 */

var app = module.exports = {
	// Настройки по умолчанию.
	config: {
		name: 'Application',
		logger: { format: 'dev', },
		cookie: { secret: '', },
		session: {
			key: 'sid',
			secret: 'session-secret',
			cookie: {
				path: '/',
				httpOnly: true,
				maxAge: 60 * 60 * 24 * 365,
			},
		},
		response: {
			statusCode: 200,
			headers: {
				'Content-Type': 'text/html; charset=utf-8',
				'Cache-Control': 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0',
			},
		},
		router: {
			tokens: {
				':id':    '(\\d+)',           // Идентификатор.
				':int':   '(-?\\d+)',         // Целое число.
				':float': '(-?\\d*\\.?\\d+)', // Дробное число.
				':text':  '(\\w+)',           // Текст (только ASCII).
				':any':   '(.+?)',            // Любые символы.
			},
		},
	},
	
	// Объект http сервера.
	server: connect(),
	
	// Объект менеджера сервисов.
	services: services,

	/**
	 * Применяет пользовательские настройки к приложению.
	 * @param callback замыкание-конфигуратор.
	 * @return this
	 */

	configure: function (callback) {
		(callback || utils.noop).call(this.config);
		return this;
	},

	/**
	 * Создает модуль и возвращает его.
	 * @param callback замыкание-конфигуратор.
	 * @return Module
	 */

	module: function (callback) {
		var module = new Module;
		(callback || utils.noop).call(module, module);
		return module;
	},

	/**
	 * Устанавливает обработчик ошибок.
	 * @param handler новый обработчик.
	 * @return this
	 */

	error: function (handler) {
		services.closure('error', handler);
		return this;
	},

	/**
	 * Подключает middleware к серверу.
	 * @param middleware замыкание.
	 * @see connect.use()
	 * @return this
	 */

	use: function (middleware) {
		this.server.use(middleware);
		return this;
	},

	/**
	 * Регистрирует модуль приложения.
	 * @param pattern шаблон маршрута.
	 * @param module объект модуля.
	 * @return this
	 */

	map: function (pattern, action) {
		if (action instanceof Module) {
			action.exportRoutes(pattern, services.router);
			return this;
		} else
			throw utils.error('Could not map root module to pattern «' + pattern + '»');
	},

	/**
	 * Запускает сервер приложения.
	 * @return this
	 */

	run: function () {
		// Компилируем шаблоны маршрутов.
		services.router.compile(this.config.router.tokens);

		// Настраиваем и запускаем сервер.
		this.server
			.use(connect.logger(this.config.logger))
			.use(connect.cookieParser(this.config.cookie.secret))
			.use(connect.cookieSession(this.config.session))
			.use(connect.bodyParser({ uploadDir: this.config.path.uploads }))
			.use(connect.query())
			.use(this.overload)
			.use(this.dispatch)
			.use(this.errorHandler);

		this.server.listen.apply(this.server, arguments);
		return this;
	},

	/**
	 * Перегружает стандартные объект запроса и ответа объектами фреймворка.
	 * @param request стандартный объект запроса.
	 * @param response стандартный объект ответа.
	 * @param next замыкание.
	 */

	overload: function (request, response, next){
		request.__proto__ = require('./request');
		response.__proto__ = require('./response');
		response.next = next;
		next();
	},

	/**
	 * Обрабатывает входящий запрос.
	 * @param request объект запроса.
	 * @param response объект ответа.
	 * @param next замыкание.
	 */

	dispatch: function (request, response, next) {
		var route, url = require('url').parse(request.url);
		if (route = services.router.find(url.pathname, request.method)) {
			route.execute(request, response, utils.merge([
				request.query, request.body, request.files, request.cookies
			]));
		} else
			next(utils.error('Not Found', 404));
	},

	/**
	 * Обработчик ошибок.
	 * @param error объект ошибки.
	 * @param request объект запроса.
	 * @param response объект ответа.
	 * @param next замыкание.
	 */

	errorHandler: function (error, request, response, next) {
		if (error instanceof Error)
		     services.error.apply(null, arguments);
		else next(error);
	},
};

// Определяем рабочие директории.
var root = path.normalize(__dirname + '/../../..');
app.config.path = {
	root: root,
	public:  path.join(root, 'public'),
	assets:  path.join(root, 'public', 'assets'),
	scripts: path.join(root, 'public', 'scripts'),
	styles:  path.join(root, 'public', 'styles'),
	uploads: path.join(root, 'public', 'uploads'),
};

// Определяем сервисы.
services.singleton('config', function () { return app.config; });
services.singleton('router', function () { return require('./router'); });
services.singleton('swig', function () { return require('./swig'); });

// Шаблонизатор по умолчанию.
services.closure('template', function (path, variables, callback) {
	services.swig.renderFile(path, variables, callback);
});

// Обработчик ошибок по умолчанию.
// Выводит короткое сообщение в окно браузера и полный стек ошибки в лог.
services.closure('error', function (error, request, response, next) {
	console.error(error.stack);
	response.send(error.stack, error.status || 500, {
		'Content-Type': 'text/plain; charset=utf-8',
		'Cache-Control': 'private, no-cache',
	});
});
