'use strict';

var services = require('./services');
var utils = require('./utils');

/**
 * Класс маршрута приложения.
 */

function Route (route)
{
	var parsed = parsePattern(route.pattern);
	this.method = parsed.method;
	this.pattern = parsed.pattern;
	this.module = route.module;
	this.action = route.action;
	this.args = route.args || [];
}

Route.prototype = {
	/**
	 * Компилирует шаблон маршрута.
	 * @param tokens массив токенов, которые могут быть использованы в маршруте.
	 */

	compile: function (tokens) {
		var regexp = this.pattern;
		if (this.pattern.indexOf(':') >= 0) {
			Object.keys(tokens).forEach(function (token) {
				regexp = regexp.replace(
					new RegExp(token, ['g']), tokens[token]
				);
			});
		}
		this.regexp = new RegExp('^' + regexp + '$');
	},

	/**
	 * Генерирует URL маршрута и возвращает его.
	 * @params args массив параметров маршрута.
	 * @return string
	 */

	url: function (args) {
		var count = this.pattern.split(':').length - 1;
		if (count > 0) {
			if (count <= args.length) {
				var uri = [], counter = 0;
				this.pattern.split('/').forEach(function (token) {
					if (token && token.indexOf(':') == 0)
						 uri.push(args[counter++]);
					else uri.push(token);
				});
				return uri.join('/');
			} else
				throw utils.error('Not enough arguments for route «' + this.pattern + '»');
		} else
			return this.pattern;
	},

	/**
	 * Регистрирует псевдоним маршрута.
	 */

	bind: function (name) {
		services.router.bind(name, this);
	},

	/**
	 * Запускает обработчик маршрута.
	 * @param request объект запроса.
	 * @param response объект ответа.
	 * @param params объект всех параметров запроса.
	 */

	execute: function (request, response, params) {
		this.module.request = request;
		this.module.response = response;
		this.module.params = params;
		this.action.apply(this.module, this.args);
	},
};

/**
 * Парсит шаблон маршрута, содержащий метод маршрута и собственно шаблон.
 * @param pattern шаблон маршрута.
 * @return string
 */

function parsePattern (pattern)
{
	var parsed = { method: 'any', pattern: pattern };
	var pos = pattern.indexOf(':/');
	if (pos > 0) {
		parsed.method = pattern.substring(0, pos).toLowerCase();
		parsed.pattern = pattern.substring(pos + 2);
	}
	return parsed;
}

module.exports = Route;
