'use strict';

var Route = require('./route');
var services = require('./services');
var utils = require('./utils');

/**
 * Класс модуля приложения.
 */

function Module ()
{
	this.routes = [];
}

Module.prototype = {
	/**
	 * Регистрирует обработчик маршрута.
	 * @param pattern шаблон маршрута.
	 * @param action обработчик маршрута (замыкание, модуль, машрут).
	 * @return Route | this
	 */

	map: function (pattern, action) {
		if (action instanceof Function) {
			var route = new Route({ pattern: pattern, module: this, action: action });
			this.routes.push(route);
			return route;
		} else if (action instanceof Route) {
			this.routes.push(action);
			return action;
		} else if (action instanceof Module) {
			action.exportRoutes(pattern, this);
			return this;
		} else
			throw utils.error('Could not map route «' + pattern + '»');
	},

	/**
	 * Регистрирует обработчик GET маршрута.
	 * @param pattern шаблон маршрута.
	 * @param action обработчик маршрута (замыкание).
	 * @see Module.map()
	 * @return Route | this
	 */

	get: function (pattern, action) {
		return this.map('get:/' + pattern, action);
	},

	/**
	 * Регистрирует обработчик PUT маршрута.
	 * @see Module.get()
	 * @return Route | this
	 */

	put: function (pattern, action) {
		return this.map('put:/' + pattern, action);
	},

	/**
	 * Регистрирует обработчик POST маршрута.
	 * @see Module.get()
	 * @return Route | this
	 */

	post: function (pattern, action) {
		return this.map('post:/' + pattern, action);
	},

	/**
	 * Регистрирует обработчик DELETE маршрута.
	 * @see Module.get()
	 * @return Route | this
	 */

	delete: function (pattern, action) {
		return this.map('delete:/' + pattern, action);
	},

	/**
	 * Экспортирует обработчики модуля в маршрутизатор.
	 * @param prefix префикс шаблона обрабатываемого URL.
	 * @param router объект маршрутизатора или модуль.
	 */

	exportRoutes: function (prefix, router) {
		this.routes.forEach(function (route) {
			route.pattern = prefix != '/' ? prefix + route.pattern.replace(/\/$/, '') : route.pattern;
			router.map(route.pattern, route);
		});
	},

	/**
	 * Формирует URL к маршруту и возвращает его.
	 * @param route имя маршрута.
	 * @param args массив аргументов.
	 * @return string
	 */

	urlto: function (route, args) {
		return services.router.get(route).url(args);
	},

	/**
	 * Обрабатывает и выводит шаблон.
	 * @param path путь к шаблону.
	 * @param variables объект переменных шаблона.
	 */

	render: function (path, variables) {
		var module = this, response = this.response, headers = services.config.response.headers;
		services.template(path, variables, function (error, body) {
			error ? response.next(utils.error('Could not render template «' + path + '»: ' + error))
			      : response.send(body, 200, services.config.response.headers);
		});
	},

	/**
	 * Отправляет ответ клиенту.
	 * @see response.send()
	 */

	send: function () {
		this.response.send.apply(this.response, arguments);
	},
};

module.exports = Module;
