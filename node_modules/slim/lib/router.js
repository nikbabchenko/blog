'use strict';

var Module = require('./module');
var Route = require('./route');
var utils = require('./utils');

/**
 * Маршрутизатор приложения.
 */

var router = module.exports = {
	// Массив маршрутов.
	routes: [],

	// Объект псевдонимов маршрутов.
	aliases: {},

	/**
	 * Компилирует шаблоны объявленных маршрутов.
	 * @param tokens массив токенов, которые могут быть использованы в маршрутах.
	 */

	compile: function (tokens) {
		this.routes.forEach(function (route) {
			route.compile(tokens);
		});
	},

	/**
	 * Возвращает маршрут по псевдониму.
	 * Генерирует исключение, если псевдоним не найден.
	 * @param name имя псевдонима.
	 * @return Route
	 */

	get: function (name) {
		if (this.aliases[name])
		     return this.aliases[name];
		else throw utils.error('Could not find route alias «' + name + '»');
	},

	/**
	 * Регистрирует псевдоним маршрута.
	 * Генерирует исключение, если псевдоним уже существует.
	 * @param name имя псевдонима.
	 * @param route объект маршрута.
	 */

	bind: function (name, route) {
		if (route instanceof Route)
		     this.aliases[name] = route;
		else throw utils.error('Alias «' + name + '» already exists');
	},

	/**
	 * Регистрирует маршрут.
	 * @param pattern шаблон маршрута.
	 * @param route объект маршрута.
	 */

	map: function (pattern, route) {
		this.routes.push(route);
		return route;
	},

	/**
	 * Возвращает маршрут, который может обработать указанный URL.
	 * @param url обрабатываемый URL.
	 */

	find: function (url, method) {
		var route;
		for (var i in this.routes) {
			route = this.routes[i];
			if (methodIsPassed(method, route.method) && route.regexp.test(url)) {
				route.args = route.regexp.exec(url).splice(1);
				return route;
			}
		}
	},
};

/**
 * Метод маршрута соответсвует методу запроса?
 * @param requestMethod метод запроса.
 * @param routeMethod метод маршрута.
 * @return bool
 */

function methodIsPassed (requestMethod, routeMethod)
{
	if (routeMethod == 'any') return true;
	if (routeMethod == requestMethod.toLowerCase()) return true;
	return false;
}
